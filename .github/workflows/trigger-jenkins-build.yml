name: Trigger Jenkins Build

on:
  push:
    branches:
      - "main"

jobs:
  trigger-jenkins:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Commit Message
        id: get-commit-message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
          echo "Commit Message: ${COMMIT_MESSAGE}"
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV

      - name: Read JSON Configuration
        id: read-json
        run: |
          if [ -f config.json ]; then
            JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
            if [ "$JOB_NAME" == "null" ] || [ -z "$JOB_NAME" ]; then
              echo "Error: 'jobName' not found in config.json"
              exit 1
            fi
            echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV
          else
            echo "Error: config.json file not found"
            exit 1
          fi

      - name: Extract Job Name
        id: extract-job-name
        run: |
          EXTRACTED_JOB_NAME=$(echo "${{ env.COMMIT_MESSAGE }}" | grep -oP '(?<=Activity: )\S+' || echo "")
          if [ -z "$EXTRACTED_JOB_NAME" ]; then
            EXTRACTED_JOB_NAME=${{ env.JOB_NAME }}
          fi
          echo "JOB_NAME=${EXTRACTED_JOB_NAME}" >> $GITHUB_ENV

      - name: Fetch Latest Jenkins Build Number
        id: fetch-build-number
        run: |
          LATEST_BUILD_NUMBER=$(curl -s -u "$JENKINS_USER:$JENKINS_API_TOKEN" \
              "$JENKINS_URL/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number" | jq -r '.number')

          if [ "$LATEST_BUILD_NUMBER" == "null" ] || [ -z "$LATEST_BUILD_NUMBER" ]; then
            echo "Error: Unable to retrieve Jenkins build number. Exiting."
            exit 1
          fi

          echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Trigger Jenkins Build
        id: trigger-build
        shell: bash
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JOB_NAME: ${{ env.JOB_NAME }}
          BUILD_NUMBER: $((LATEST_BUILD_NUMBER + 1))
          DEPLOY_ENVIRONMENT: development
        run: |
          # Trim trailing slashes from JENKINS_URL
          TRIMMED_JENKINS_URL=$(echo "$JENKINS_URL" | sed 's:/*$::')

          # Clean job name (no need to modify)
          CLEAN_JOB_NAME="$JOB_NAME"

          # Fetch the Jenkins crumb
          CRUMB=$(curl -s -u "$JENKINS_USER:$JENKINS_API_TOKEN" "$TRIMMED_JENKINS_URL/crumbIssuer/api/json" | jq -r '.crumb')

          if [ -z "$CRUMB" ]; then
            echo "Failed to obtain crumb. Exiting."
            exit 1
          fi

          # Construct the full URL
          FULL_URL="${TRIMMED_JENKINS_URL}/job/${CLEAN_JOB_NAME}/build"
          echo "Full URL: $FULL_URL"

          # Execute the curl command to trigger the Jenkins build with the crumb
          echo "Executing curl command:"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_URL" \
               --user "$JENKINS_USER:$JENKINS_API_TOKEN" \
               --header "Jenkins-Crumb:$CRUMB" \
               --header "Content-Type: application/x-www-form-urlencoded" \
               --data-urlencode "BUILD_NUMBER=$BUILD_NUMBER" \
               --data-urlencode "DEPLOY_ENVIRONMENT=$DEPLOY_ENVIRONMENT")

          if [ "$response" -ne 201 ]; then
            echo "Error: Jenkins build trigger failed with response code $response. Exiting."
            exit 1
          fi

          echo "Jenkins build triggered successfully."

      - name: Increment and Update Build Number
        if: steps.trigger-build.outcome == 'success'
        id: increment-build-number
        run: |
          BUILD_NUMBER_FILE=".github/build-number.txt"

          # Fetch the latest build number from Jenkins
          LATEST_BUILD_NUMBER=$(curl -s -u "$JENKINS_USER:$JENKINS_API_TOKEN" \
              "$JENKINS_URL/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number" | jq -r '.number')

          if [ "$LATEST_BUILD_NUMBER" == "null" ] || [ -z "$LATEST_BUILD_NUMBER" ]; then
            echo "Error: Unable to retrieve Jenkins build number. Exiting."
            exit 1
          fi

          # Increment Build Number
          BUILD_NUMBER=$((LATEST_BUILD_NUMBER + 1))
          BUILD_NUMBER=$(printf "%02d" $BUILD_NUMBER)
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

          # Update build number in the file
          echo "${BUILD_NUMBER}" > "$BUILD_NUMBER_FILE"

          # Configure Git and commit the updated build number
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          git fetch || { echo "git fetch failed"; exit 1; }
          git reset --hard origin/${GITHUB_REF#refs/heads/} || { echo "git reset failed"; exit 1; }

          git add "$BUILD_NUMBER_FILE"
          if ! git diff --cached --quiet; then
            git commit -m "Update build number to ${BUILD_NUMBER}" || { echo "git commit failed"; exit 1; }
            git push || { echo "git push failed"; exit 1; }
          else
            echo "No changes to commit"
          fi