name: Trigger Jenkins Build and Update Build Numbers

on:
  push:
    branches:
      - main

jobs:
  trigger-jenkins:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false  # Disable default GitHub token

      - name: Read JSON Configuration
        id: read-json
        run: |
          if [ -f config.json ]; then
            JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
            if [ "$JOB_NAME" == "null" ] || [ -z "$JOB_NAME" ]; then
              echo "Error: 'jobName' not found in config.json"
              exit 1
            fi
            echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV
          else
            echo "Error: config.json file not found"
            exit 1
          fi

      - name: Fetch Latest Jenkins Build Number
        id: fetch-jenkins-build-number
        run: |
          LATEST_BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number" | jq -r '.number')

          if [ -z "$LATEST_BUILD_NUMBER" ] || [ "$LATEST_BUILD_NUMBER" == "null" ]; then
            echo "Error: No builds found for job '${{ env.JOB_NAME }}'."
            exit 1
          fi

          echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Trigger Jenkins Build
        id: trigger-build
        shell: bash
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JOB_NAME: ${{ env.JOB_NAME }}
        run: |
          TRIMMED_JENKINS_URL=$(echo "$JENKINS_URL" | sed 's:/*$::')
          CRUMB=$(curl -s -u "$JENKINS_USER:$JENKINS_API_TOKEN" "$TRIMMED_JENKINS_URL/crumbIssuer/api/json" | jq -r '.crumb')

          if [ -z "$CRUMB" ]; then
            echo "Failed to obtain crumb. Exiting."
            exit 1
          fi

          FULL_URL="${TRIMMED_JENKINS_URL}/job/${JOB_NAME}/build"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_URL" \
               --user "$JENKINS_USER:$JENKINS_API_TOKEN" \
               --header "Jenkins-Crumb:$CRUMB" \
               --header "Content-Type: application/x-www-form-urlencoded")

          if [ "$response" -ne 201 ]; then
            echo "Error: Jenkins build trigger failed with response code $response. Exiting."
            exit 1
          fi

          echo "Jenkins build triggered successfully."

      - name: Re-fetch Latest Jenkins Build Number & Status
        id: refetch-jenkins-build-number-status
        run: |
          sleep 10  # Wait for Jenkins to update the build number and status
          LATEST_BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number" | jq -r '.number')
          BUILD_STATUS=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/$LATEST_BUILD_NUMBER/api/json?tree=result" | jq -r '.result')
          echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV
          echo "BUILD_STATUS=${BUILD_STATUS}" >> $GITHUB_ENV

      - name: Update Build Numbers in JSON
        id: update-build-numbers
        run: |
          JSON_FILE=".github/build_numbers/build_numbers.json"
          mkdir -p .github/build_numbers

          # Initialize the JSON file if it doesn't exist
          if [ ! -f "$JSON_FILE" ]; then
            echo '{"last_successful_build_number": 0, "build_history": []}' > "$JSON_FILE"
          fi

          # Fetch the last successful build number
          FULL_URL="${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/api/json"
          LAST_SUCCESSFUL_BUILD_NUMBER=$(curl -s -u "$JENKINS_USER:$JENKINS_API_TOKEN" "$FULL_URL" | jq -r '.number')

          # Update the last successful build number in JSON
          jq ".last_successful_build_number = $LAST_SUCCESSFUL_BUILD_NUMBER" "$JSON_FILE" > tmp.$$.json && mv tmp.$$.json "$JSON_FILE"
          echo "Updated last successful build number to $LAST_SUCCESSFUL_BUILD_NUMBER"

          # Append the latest build number and status to build_history in JSON
          jq '.build_history += [{"build_number": '"${{ env.LATEST_BUILD_NUMBER }}"', "status": "'"${{ env.BUILD_STATUS }}"'"}]' \
            "$JSON_FILE" > tmp.$$.json && mv tmp.$$.json "$JSON_FILE"

          echo "Build history updated in $JSON_FILE"

          # Configure Git, fetch, rebase, commit, and push the updated build numbers
          git config user.name "Subbaramaiah Chevuru"
          git config user.email "ram.subaram@gmail.com"
          git fetch origin
          git stash  # Stash any changes
          git pull --rebase origin main  # Rebase to handle non-fast-forward errors
          git add "$JSON_FILE"
          if ! git diff --cached --quiet; then
            git commit -m "Update build numbers in JSON with status [skip ci]"
            git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} HEAD:${GITHUB_REF#refs/heads/}
          else
            echo "No changes to commit."
          fi
