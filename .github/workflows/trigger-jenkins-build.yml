name: Trigger Jenkins Build and Update Build Numbers

on:
  push:
    branches:
      - main

jobs:
  trigger-jenkins:
    runs-on: self-hosted

    steps:
      - name: Prepare log directory
        run: mkdir -p "$GITHUB_WORKSPACE/logs"

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Ensure the repository is clean
        run: |
          {
            if ! git diff --quiet; then
              echo "There are uncommitted changes. Stashing them..."
              git stash push -m "Stashing uncommitted changes before LFS migration"
            else
              echo "No uncommitted changes found."
            fi
          } > "$GITHUB_WORKSPACE/logs/clean_repo.log" 2>&1

      - name: Clear Git LFS Objects
        run: |
          {
            echo "Clearing Git LFS objects..."

            git lfs uninstall --system || true
            git lfs uninstall --local || true
            git lfs uninstall --skip-repo || true

            git lfs prune || true

            echo "Exporting all LFS objects (if any)..."
            git lfs migrate export --include="*" --yes || true

            echo "Git LFS cleanup completed."
          } > "$GITHUB_WORKSPACE/logs/git_lfs_cleanup.log" 2>&1

      - name: Install Git LFS
        run: |
          {
            git lfs install
            echo "Attempting to fetch LFS objects..."
            git lfs fetch --all || echo "Warning: Git LFS fetch failed (possibly quota-related)."
          } > "$GITHUB_WORKSPACE/logs/git_lfs_install.log" 2>&1

      - name: Read JSON Configuration
        id: read-json
        run: |
          {
            if [ -f config.json ]; then
              JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
              if [ -z "$JOB_NAME" ] || [ "$JOB_NAME" == "null" ]; then
                echo "Error: 'jobName' not found in config.json"
                exit 1
              fi
              echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV
            else
              echo "Error: config.json file not found"
              exit 1
            fi
          } > "$GITHUB_WORKSPACE/logs/read_json.log" 2>&1

      - name: Fetch Latest Jenkins Build Number
        id: fetch-jenkins-build-number
        run: |
          {
            RESPONSE=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number")
            LATEST_BUILD_NUMBER=$(echo "$RESPONSE" | jq -r '.number')
            if [ -z "$LATEST_BUILD_NUMBER" ] || [ "$LATEST_BUILD_NUMBER" == "null" ]; then
              echo "Error: No builds found."
              exit 1
            fi
            echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV
          } > "$GITHUB_WORKSPACE/logs/jenkins_build_number.log" 2>&1

      - name: Fetch Jenkins Crumb for CSRF Protection
        run: |
          {
            RESPONSE=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/crumbIssuer/api/json")
            CRUMB=$(echo "$RESPONSE" | jq -r '.crumb')
            if [ -z "$CRUMB" ] || [ "$CRUMB" == "null" ]; then
              echo "Failed to obtain Jenkins crumb."
              exit 1
            fi
            echo "JENKINS_CRUMB=$CRUMB" >> $GITHUB_ENV
          } > "$GITHUB_WORKSPACE/logs/jenkins_crumb.log" 2>&1

      - name: Trigger Jenkins Build
        id: trigger-build
        run: |
          {
            URL=$(echo "${{ secrets.JENKINS_URL }}" | sed 's:/*$::')
            FULL_URL="${URL}/job/${{ env.JOB_NAME }}/build"
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_URL" \
              --user "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              --header "Jenkins-Crumb:${{ env.JENKINS_CRUMB }}" \
              --header "Content-Type: application/x-www-form-urlencoded" \
              --request POST)

            if [ "$RESPONSE" -ne 201 ]; then
              echo "Error: Jenkins build trigger failed with response $RESPONSE"
              exit 1
            fi
            echo "Jenkins build triggered successfully."
          } > "$GITHUB_WORKSPACE/logs/trigger_jenkins.log" 2>&1

      - name: Re-fetch Latest Jenkins Build Number & Status
        id: refetch-jenkins-build-number-status
        run: |
          {
            echo "Waiting for Jenkins to finish..."
            sleep 100

            LATEST_BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
                "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number" | jq -r '.number')

            BUILD_STATUS=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
                "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/${LATEST_BUILD_NUMBER}/api/json?tree=result" | jq -r '.result')

            echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV
            echo "BUILD_STATUS=${BUILD_STATUS}" >> $GITHUB_ENV
          } > "$GITHUB_WORKSPACE/logs/jenkins_status.log" 2>&1

      - name: Update Build Numbers in JSON and Commit
        run: |
          {
            JSON_FILE=".github/build_numbers/build_numbers_status.json"
            mkdir -p .github/build_numbers

            if [ ! -f "$JSON_FILE" ]; then
              echo '{"last_successful_build_number": 0, "build_history": []}' > "$JSON_FILE"
            fi

            LAST_SUCCESSFUL=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/api/json" | jq -r '.number')

            TIMESTAMP=$(TZ=Asia/Kolkata date +"%Y-%m-%dT%H:%M:%S%z")

            jq --argjson lastBuild "$LAST_SUCCESSFUL" \
               --arg timestamp "$TIMESTAMP" \
               '.last_successful_build_number = $lastBuild | .last_updated = $timestamp' \
               "$JSON_FILE" > tmp.json && mv tmp.json "$JSON_FILE"

            jq --argjson latestBuildNumber "${{ env.LATEST_BUILD_NUMBER }}" \
               --arg buildStatus "${{ env.BUILD_STATUS }}" \
               --arg timestamp "$TIMESTAMP" \
               '.build_history += [{"build_number": $latestBuildNumber, "status": $buildStatus, "timestamp": $timestamp}]' \
               "$JSON_FILE" > tmp.json && mv tmp.json "$JSON_FILE"

            echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
            git config user.name "${{ github.actor }}"
            git config user.email "${{ secrets.GIT_EMAIL }}"
            git config --global commit.gpgSign true
            git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"

            if ! git diff --quiet; then
              git fetch origin
              git stash push -m "Stashing untracked files"
              git pull --rebase origin main || {
                git merge --abort
                git stash pop || true
                if git ls-files -u | grep -q .; then
                  echo "Merge conflicts detected."
                  exit 1
                fi
              }
              git stash pop || true
              git add "$JSON_FILE"
              git commit -S -m "Update build numbers for build ${{ env.LATEST_BUILD_NUMBER }} - ${{ env.BUILD_STATUS }} [$TIMESTAMP] [skip ci]"
              git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} HEAD:${GITHUB_REF#refs/heads/}
            else
              echo "No changes to commit."
            fi
          } > "$GITHUB_WORKSPACE/logs/update_json_commit.log" 2>&1

      - name: Upload Execution Logs
        uses: actions/upload-artifact@v4
        with:
          name: trigger-jenkins-logs
          path: "$GITHUB_WORKSPACE/logs"
