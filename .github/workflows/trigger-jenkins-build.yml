name: Trigger Jenkins Build and Update Build Numbers

on:
  push:
    branches:
      - main

jobs:
  trigger-jenkins:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history for complete operations
          persist-credentials: false  # Disable default GitHub token

      - name: Install Git LFS
        run: |
          # Install Git LFS if not already installed
          git lfs install
          # Fetch LFS objects to ensure they are correctly pulled
          git lfs pull

      - name: Read JSON Configuration
        id: read-json
        run: |
          # Check if config.json exists and read jobName
          if [ -f config.json ]; then
            JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
            if [ -z "$JOB_NAME" ] || [ "$JOB_NAME" == "null" ]; then
              echo "Error: 'jobName' not found in config.json"
              exit 1
            fi
            echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV
          else
            echo "Error: config.json file not found"
            exit 1
          fi

      - name: Fetch Latest Jenkins Build Number
        id: fetch-jenkins-build-number
        run: |
          # Fetch the last build number from Jenkins
          LATEST_BUILD_NUMBER_RESPONSE=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number")

          # Parse the build number
          LATEST_BUILD_NUMBER=$(echo "$LATEST_BUILD_NUMBER_RESPONSE" | jq -r '.number')

          # Check if the build number is valid
          if [ -z "$LATEST_BUILD_NUMBER" ] || [ "$LATEST_BUILD_NUMBER" == "null" ]; then
            echo "Error: No builds found for job '${{ env.JOB_NAME }}'."
            exit 1
          fi

          echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Trigger Jenkins Build
        id: trigger-build
        run: |
          # Trim trailing slashes from Jenkins URL
          TRIMMED_JENKINS_URL=$(echo "$JENKINS_URL" | sed 's:/*$::')
          # Get Jenkins Crumb for CSRF protection
          CRUMB=$(curl -s -u "$JENKINS_USER:$JENKINS_API_TOKEN" "$TRIMMED_JENKINS_URL/crumbIssuer/api/json" | jq -r '.crumb')

          # Ensure the crumb is valid
          if [ -z "$CRUMB" ]; then
            echo "Failed to obtain crumb. Exiting."
            exit 1
          fi

          # Trigger the Jenkins build
          FULL_URL="${TRIMMED_JENKINS_URL}/job/${JOB_NAME}/build"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_URL" \
               --user "$JENKINS_USER:$JENKINS_API_TOKEN" \
               --header "Jenkins-Crumb:$CRUMB" \
               --header "Content-Type: application/x-www-form-urlencoded" \
               --request POST)

          if [ "$response" -ne 201 ]; then
            echo "Error: Jenkins build trigger failed with response code $response. Exiting."
            exit 1
          fi

          echo "Jenkins build triggered successfully."

      - name: Poll Jenkins for Build Status
        id: poll-jenkins-status
        run: |
          # Poll Jenkins for the build status every 10 seconds, for up to 5 minutes
          MAX_RETRIES=30
          RETRY_INTERVAL=10
          BUILD_STATUS=""
          BUILD_NUMBER="${{ env.LATEST_BUILD_NUMBER }}"

          for ((i=0; i<MAX_RETRIES; i++)); do
            # Fetch the build status
            BUILD_STATUS=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/$BUILD_NUMBER/api/json?tree=result" | jq -r '.result')

            if [ "$BUILD_STATUS" != "null" ]; then
              break
            fi

            echo "Waiting for Jenkins build to complete. Retry $((i+1))/$MAX_RETRIES..."
            sleep $RETRY_INTERVAL
          done

          if [ "$BUILD_STATUS" == "null" ]; then
            echo "Error: Build did not complete within the expected time."
            exit 1
          fi

          echo "BUILD_STATUS=${BUILD_STATUS}" >> $GITHUB_ENV
          echo "Build completed with status: $BUILD_STATUS"

      - name: Update Build Numbers in JSON and Commit
        run: |
          # Define the JSON file path
          JSON_FILE=".github/build_numbers/build_numbers_status.json"
          mkdir -p .github/build_numbers

          # Initialize the JSON file if it doesn't exist
          if [ ! -f "$JSON_FILE" ]; then
            echo '{"last_successful_build_number": 0, "build_history": []}' > "$JSON_FILE"
          fi

          # Fetch the last successful build number
          FULL_URL="${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/api/json"
          LAST_SUCCESSFUL_BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" "$FULL_URL" | jq -r '.number')

          # Update the last successful build number in JSON
          jq ".last_successful_build_number = $LAST_SUCCESSFUL_BUILD_NUMBER" "$JSON_FILE" > tmp.$$.json && mv tmp.$$.json "$JSON_FILE"
          echo "Updated last successful build number to $LAST_SUCCESSFUL_BUILD_NUMBER"

          # Append the latest successful build number and status to build_history in JSON
          jq --argjson latestBuildNumber "${{ env.LATEST_BUILD_NUMBER }}" \
             --arg buildStatus "${{ env.BUILD_STATUS }}" \
             '.build_history += [{"build_number": $latestBuildNumber, "status": $buildStatus}]' \
            "$JSON_FILE" > tmp.$$.json && mv tmp.$$.json "$JSON_FILE"

          echo "Build history updated in $JSON_FILE"

          # Import GPG private key and configure Git
          mkdir -p ~/.gnupg
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          git config user.name "${{ github.actor }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config --global commit.gpgSign true
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"

          # Check if there are changes to commit
          if ! git diff --quiet; then
            echo "Changes detected, preparing to commit."

            # Attempt to pull with rebase
            git fetch origin
            git stash push -m "Stashing untracked files"
            git pull --rebase origin main || {
              echo "Merge conflict occurred. Attempting to resolve automatically."
              git merge --abort
              git stash pop || true
              # Check if there's a merge conflict
              if git ls-files -u | grep -q .; then
                echo "Merge conflicts detected. Please resolve them manually."
                exit 1
              fi
            }

            git stash pop || true
            git add "$JSON_FILE"
            git commit -S -m "Update build numbers in JSON for build ${{ env.LATEST_BUILD_NUMBER }} with status ${{ env.BUILD_STATUS }} [skip ci]"
            git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} HEAD:${GITHUB_REF#refs/heads/}
          else
            echo "No changes to commit."
          fi
