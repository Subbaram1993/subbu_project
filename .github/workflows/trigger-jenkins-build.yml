name: Trigger Jenkins Build and Update Build Numbers

on:
  push:
    branches:
      - main

jobs:
  trigger-jenkins:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false  # Disable default GitHub token

      - name: Read JSON Configuration
        id: read-json
        run: |
          if [ -f config.json ]; then
            JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
            if [ "$JOB_NAME" == "null" ] || [ -z "$JOB_NAME" ]; then
              echo "Error: 'jobName' not found in config.json"
              exit 1
            fi
            echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV
          else
            echo "Error: config.json file not found"
            exit 1
          fi

      - name: Fetch Latest Jenkins Build Number
        id: fetch-jenkins-build-number
        run: |
          LATEST_BUILD_NUMBER_RESPONSE=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number")

          echo "Raw response from Jenkins:"
          echo "$LATEST_BUILD_NUMBER_RESPONSE"

          # Parse the build number
          LATEST_BUILD_NUMBER=$(echo "$LATEST_BUILD_NUMBER_RESPONSE" | jq -r '.number')

          if [ -z "$LATEST_BUILD_NUMBER" ] || [ "$LATEST_BUILD_NUMBER" == "null" ]; then
            echo "Error: No builds found for job '${{ env.JOB_NAME }}'."
            exit 1
          fi

          echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV
        shell: bash

      - name: Trigger Jenkins Build
        id: trigger-build
        shell: bash
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JOB_NAME: ${{ env.JOB_NAME }}
        run: |
          TRIMMED_JENKINS_URL=$(echo "$JENKINS_URL" | sed 's:/*$::')
          CRUMB=$(curl -s -u "$JENKINS_USER:$JENKINS_API_TOKEN" "$TRIMMED_JENKINS_URL/crumbIssuer/api/json" | jq -r '.crumb')

          if [ -z "$CRUMB" ]; then
            echo "Failed to obtain crumb. Exiting."
            exit 1
          fi

          FULL_URL="${TRIMMED_JENKINS_URL}/job/${JOB_NAME}/build"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_URL" \
               --user "$JENKINS_USER:$JENKINS_API_TOKEN" \
               --header "Jenkins-Crumb:$CRUMB" \
               --header "Content-Type: application/x-www-form-urlencoded" \
               --request POST)

          if [ "$response" -ne 201 ]; then
            echo "Error: Jenkins build trigger failed with response code $response. Exiting."
            exit 1
          fi

          echo "Jenkins build triggered successfully."

      - name: Re-fetch Latest Jenkins Build Number & Status
        id: refetch-jenkins-build-number-status
        run: |
          sleep 30  # Wait for Jenkins to update the build number and status
          LATEST_BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number" | jq -r '.number')
          BUILD_STATUS=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/$LATEST_BUILD_NUMBER/api/json?tree=result" | jq -r '.result')

          # Set the status to "FAILED" if the build failed
          if [ "$BUILD_STATUS" == "FAILURE" ]; then
            BUILD_STATUS="FAILED"
          fi

          echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV
          echo "BUILD_STATUS=${BUILD_STATUS}" >> $GITHUB_ENV

      - name: Update Build Numbers in JSON
        id: update-build-numbers
        run: |
          JSON_FILE=".github/build_numbers/build_numbers.json"
          FAILED_JSON_FILE=".github/build_numbers/failed_builds.json"  # New failed builds file
          mkdir -p .github/build_numbers

          # Initialize the JSON files if they don't exist
          if [ ! -f "$JSON_FILE" ]; then
            echo '{"last_successful_build_number": 0, "build_history": []}' > "$JSON_FILE"
          fi

          if [ ! -f "$FAILED_JSON_FILE" ]; then
            echo '{"failed_builds": []}' > "$FAILED_JSON_FILE"  # Initialize failed builds JSON
          fi

          # Fetch the last successful build number
          FULL_URL="${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/api/json"
          LAST_SUCCESSFUL_BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" "$FULL_URL" | jq -r '.number')

          # Update the last successful build number in JSON
          jq ".last_successful_build_number = $LAST_SUCCESSFUL_BUILD_NUMBER" "$JSON_FILE" > tmp.$$.json && mv tmp.$$.json "$JSON_FILE"
          echo "Updated last successful build number to $LAST_SUCCESSFUL_BUILD_NUMBER"

          # Append the latest build number and status to build_history in JSON
          jq --argjson latestBuildNumber "${{ env.LATEST_BUILD_NUMBER }}" \
             --arg buildStatus "${{ env.BUILD_STATUS }}" \
             '.build_history += [{"build_number": $latestBuildNumber, "status": $buildStatus}]' \
            "$JSON_FILE" > tmp.$$.json && mv tmp.$$.json "$JSON_FILE"

          echo "Build history updated in $JSON_FILE"

          # Append to failed_builds.json if the build failed
          if [ "$BUILD_STATUS" == "FAILED" ]; then
            jq --argjson latestBuildNumber "${{ env.LATEST_BUILD_NUMBER }}" \
               --arg buildStatus "${{ env.BUILD_STATUS }}" \
               '.failed_builds += [{"build_number": $latestBuildNumber, "status": $buildStatus}]' \
              "$FAILED_JSON_FILE" > tmp.$$.json && mv tmp.$$.json "$FAILED_JSON_FILE"

            echo "Failed build history updated in $FAILED_JSON_FILE"
          fi

          # Fetch previously failed builds if there are any
          echo "Fetching previously failed builds..."
          FAILED_BUILDS_RESPONSE=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/api/json?tree=builds[number,status,result]")

          # Check if there are any failed builds
          FAILED_BUILDS=$(echo "$FAILED_BUILDS_RESPONSE" | jq -r '.builds[] | select(.result=="FAILURE") | {build_number: .number, status: "FAILED"}')

          # Append previously failed builds to the JSON file
          if [ "$FAILED_BUILDS" != "" ]; then
            jq --argjson failedBuilds "[$FAILED_BUILDS]" \
              '.failed_builds += $failedBuilds' \
              "$FAILED_JSON_FILE" > tmp.$$.json && mv tmp.$$.json "$FAILED_JSON_FILE"

            echo "Previously failed builds added to $FAILED_JSON_FILE"
          else
            echo "No previously failed builds found."
          fi

          # Configure Git
          git config user.name "${{ github.actor }}"  # Dynamic GitHub username
          git config user.email "${{ secrets.GIT_EMAIL }}"  # Secret for email

          # Check if there are changes to commit
          if ! git diff --quiet; then
            echo "Changes detected, preparing to commit."

            # Attempt to pull with rebase
            git fetch origin
            git stash push -m "Stashing untracked files"
            git pull --rebase origin main || {
              echo "Merge conflict occurred. Attempting to resolve automatically."
              git merge --abort  # Abort the current merge
              git stash pop || true  # Pop the stash, ignore if empty

              # Check if there's a merge conflict
              if git ls-files -u | grep -q .; then
                echo "Merge conflicts detected. Please resolve them manually."
                exit 1
              fi
            }

            git stash pop
            git add "$JSON_FILE" "$FAILED_JSON_FILE"  # Add both JSON files

            # Commit the changes
            git commit -m "Update build numbers and failed builds in JSON with status [skip ci]"
            git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} HEAD:${GITHUB_REF#refs/heads/}
          else
            echo "No changes to commit."
          fi
