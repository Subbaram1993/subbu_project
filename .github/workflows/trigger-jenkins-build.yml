name: Trigger Jenkins Build

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - ".github/build_numbers/old_build_number.txt"
      - ".github/build_numbers/new_build_number.txt"

jobs:
  trigger-jenkins:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false  # Disable default GitHub token

      - name: Get Commit Message
        id: get-commit-message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
          echo "Commit Message: ${COMMIT_MESSAGE}"
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV

      - name: Skip build if commit message contains [skip ci]
        id: skip-build
        run: |
          if echo "${{ env.COMMIT_MESSAGE }}" | grep -q '\[skip ci\]'; then
            echo "Skipping build trigger due to '[skip ci]' in commit message."
            exit 0
          fi

      - name: Read JSON Configuration
        id: read-json
        run: |
          if [ -f config.json ]; then
            JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
            if [ "$JOB_NAME" == "null" ] || [ -z "$JOB_NAME" ]; then
              echo "Error: 'jobName' not found in config.json"
              exit 1
            fi
            echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV
          else
            echo "Error: config.json file not found"
            exit 1
          fi

      - name: Fetch Local Build Number
        id: fetch-local-build-number
        run: |
          BUILD_NUMBER_FILE=".github/build_numbers/old_build_number.txt"
          if [ -f "$BUILD_NUMBER_FILE" ]; then
            LOCAL_BUILD_NUMBER=$(cat "$BUILD_NUMBER_FILE")
          else
            LOCAL_BUILD_NUMBER=0
          fi
          echo "LOCAL_BUILD_NUMBER=${LOCAL_BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Fetch Latest Jenkins Build Number
        id: fetch-jenkins-build-number
        run: |
          LATEST_BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number" | jq -r '.number')
          echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Determine New Build Number
        id: determine-build-number
        run: |
          if [ "${{ env.LOCAL_BUILD_NUMBER }}" -ge "${{ env.LATEST_BUILD_NUMBER }}" ]; then
            BUILD_NUMBER=$((LOCAL_BUILD_NUMBER + 1))
          else
            BUILD_NUMBER=$((LATEST_BUILD_NUMBER + 1))
          fi
          BUILD_NUMBER=$(printf "%02d" "$BUILD_NUMBER")
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Trigger Jenkins Build
        id: trigger-build
        shell: bash
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JOB_NAME: ${{ env.JOB_NAME }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          DEPLOY_ENVIRONMENT: development
        run: |
          TRIMMED_JENKINS_URL=$(echo "$JENKINS_URL" | sed 's:/*$::')
          CRUMB=$(curl -s -u "$JENKINS_USER:$JENKINS_API_TOKEN" "$TRIMMED_JENKINS_URL/crumbIssuer/api/json" | jq -r '.crumb')

          if [ -z "$CRUMB" ]; then
            echo "Failed to obtain crumb. Exiting."
            exit 1
          fi

          FULL_URL="${TRIMMED_JENKINS_URL}/job/${JOB_NAME}/build"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$FULL_URL" \
               --user "$JENKINS_USER:$JENKINS_API_TOKEN" \
               --header "Jenkins-Crumb:$CRUMB" \
               --header "Content-Type: application/x-www-form-urlencoded" \
               --data-urlencode "BUILD_NUMBER=$BUILD_NUMBER" \
               --data-urlencode "DEPLOY_ENVIRONMENT=$DEPLOY_ENVIRONMENT")

          if [ "$response" -ne 201 ]; then
            echo "Error: Jenkins build trigger failed with response code $response. Exiting."
            exit 1
          fi

          echo "Jenkins build triggered successfully."

      - name: Re-fetch Latest Jenkins Build Number & Status
        id: refetch-jenkins-build-number-status
        run: |
          sleep 10  # Wait for Jenkins to update the build number and status
          LATEST_BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastBuild/api/json?tree=number" | jq -r '.number')
          BUILD_STATUS=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/$LATEST_BUILD_NUMBER/api/json?tree=result" | jq -r '.result')
          echo "LATEST_BUILD_NUMBER=${LATEST_BUILD_NUMBER}" >> $GITHUB_ENV
          echo "BUILD_STATUS=${BUILD_STATUS}" >> $GITHUB_ENV

      - name: Update Build Numbers Files
        if: steps.trigger-build.outcome == 'success'
        id: update-build-numbers
        run: |
          OLD_BUILD_NUMBER_FILE=".github/build_numbers/old_build_number.txt"
          NEW_BUILD_NUMBER_FILE=".github/build_numbers/new_build_number.txt"
          mkdir -p .github/build_numbers

          # Fetch the last N builds (adjust the count as necessary)
          BUILD_HISTORY=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/api/json?tree=builds[number,result]" | jq -r '.builds[] | "\(.number) - \(.result)"')

          echo "Build history response: $BUILD_HISTORY"

          # Update old_build_number.txt with the latest build number
          echo "${{ env.LATEST_BUILD_NUMBER }}" > "$OLD_BUILD_NUMBER_FILE"
          echo "Updated old build number to $OLD_BUILD_NUMBER_FILE"

          # Initialize new_build_number.txt with current build history
          echo "$BUILD_HISTORY" > "$NEW_BUILD_NUMBER_FILE"

          # Filter and append the range of new build numbers with status
          for (( i=$((${{ env.LOCAL_BUILD_NUMBER }} + 1)); i<=${{ env.LATEST_BUILD_NUMBER }}; i++ )); do
            if [[ -z "$i" || ! "$i" =~ ^[0-9]+$ ]]; then
              echo "Invalid build number encountered: $i. Skipping."
              continue
            fi

            # Fetch the build status from Jenkins
            BUILD_STATUS=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
                                  "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/$i/api/json?tree=result" | jq -r '.result')

            # Filter out builds that are still in progress
            if [ "$BUILD_STATUS" == "SUCCESS" ]; then
              BUILD_STATUS="success"
              echo "$i - $BUILD_STATUS" >> "$NEW_BUILD_NUMBER_FILE"
              echo "Build #$i status: $BUILD_STATUS"
            elif [ "$BUILD_STATUS" == "FAILURE" ]; then
              BUILD_STATUS="failed"
              echo "$i - $BUILD_STATUS" >> "$NEW_BUILD_NUMBER_FILE"
              echo "Build #$i status: $BUILD_STATUS"
            fi
          done

          echo "Build history updated in $NEW_BUILD_NUMBER_FILE"

          # Configure Git, fetch, rebase, commit, and push the updated build numbers
          git config user.name "Subbaramaiah Chevuru"
          git config user.email "ram.subaram@gmail.com"
          git fetch origin
          git rebase origin/main  # Rebase to handle non-fast-forward errors
          git add "$OLD_BUILD_NUMBER_FILE" "$NEW_BUILD_NUMBER_FILE"
          if ! git diff --cached --quiet; then
            git commit -m "Update build numbers with status [skip ci]"
            git push https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} HEAD:${GITHUB_REF#refs/heads/}
          else
            echo "No changes to commit."
          fi

      - name: Post-job Cleanup
        if: always()
        run: |
          echo "Starting post-job cleanup..."
          if [ -x "/usr/bin/make" ]; then
            echo "Make executable found at /usr/bin/make"
          else
            echo "Make executable not found. Skipping make cleanup."
          fi
