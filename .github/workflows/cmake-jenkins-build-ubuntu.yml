name: CMake Build, Test, and Update Tag with Jenkins Build Number

on:
  workflow_run:
    workflows:
      - "Trigger Jenkins Build and Update Build Numbers"  # Name of the triggering workflow
    types:
      - completed
    conclusion: success  # Ensure it runs only if trigger-jenkins-build.yml is successful

env:
  BUILD_TYPE: Release
  JENKINS_URL: ${{ secrets.JENKINS_URL }}
  JENKINS_USER: ${{ secrets.JENKINS_USER }}
  JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}

jobs:
  build-and-tag:
    runs-on: self-hosted

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Read the config.json and set the jobName as an environment variable
      - name: Set Job Name from config.json
        id: set_job_name
        run: |
          JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
          echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

      # Pull Latest Changes and Handle Conflicts
      - name: Pull Latest Changes and Handle Conflicts
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config --global commit.gpgSign true
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"

          git stash || echo "Nothing to stash"
          git pull origin main --rebase || {
            echo "Merge conflict detected. Resolving automatically using 'theirs'."
            git checkout --theirs .
            git add .
            git rebase --continue || {
              git rebase --abort
              exit 1
            }
          }
          git stash pop || echo "No stashed changes to apply"

      # Fetch Latest Jenkins Build Number
      - name: Get Latest Jenkins Build Number
        id: get_jenkins_build_number
        run: |
          BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/buildNumber")
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

      # Fetch Jenkins Build Changes (Commit Messages)
      - name: Fetch Jenkins Build Changes
        id: fetch_changes
        run: |
          CHANGES=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/$BUILD_NUMBER/api/json" | \
            jq -r '.changeSet.items[].msg' | tr '\n' ' ' )
          echo "CHANGES=${CHANGES}" >> $GITHUB_ENV

      # Determine Version
      - name: Determine Version
        id: determine_version
        run: |
          PATCH=$((BUILD_NUMBER % 10))
          MINOR=$((BUILD_NUMBER / 10 % 6))
          MAJOR=$((BUILD_NUMBER / 60))
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Determined Version: $VERSION"

      # Compile, Link, and Run Tests
      - name: Clean and Build the Project
        run: |
          echo "Cleaning up previous build..."
          rm -rf build

          # Create a new build directory
          echo "Creating new build directory..."
          mkdir -p build

          # Run cmake to configure the project
          echo "Configuring the project with cmake..."
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

          # Compile the project
          echo "Compiling the project..."
          cd build
          make

          # Optional: Run tests using make
          echo "Running tests with make..."
          make test

      # Run CTest and display output
      - name: Run CTest
        run: |
          echo "Running tests with ctest..."
          cd build
          # Run ctest and display the output directly
          ctest --output-on-failure

      # Save Artifacts in Repository (only if needed for further steps)
      - name: Save Changes to Repo (Without Artifacts)
        run: |
          git add . # Add all changed files, skipping artifacts
          git commit -S -m "Add updated version ${{ env.VERSION }}" || echo "No changes to commit"

      # Create and Push Tag
      - name: Create and Push Tag
        run: |
          TAG_NAME="${{ env.VERSION }}"
          echo "Incremented the TAG version: $TAG_NAME"
          git tag -f "$TAG_NAME"
          git push origin --force "$TAG_NAME"

      # Push Changes
      - name: Push Changes
        run: |
          git push origin main

      # Send email notification after Jenkins build completion
      - name: Send Email Notification
        run: |
          python3 scripts/send_email.py "${{ env.PROJECT_NAME }}" "${{ env.BUILD_NUMBER }}" "SUCCESS" "${{ secrets.JENKINS_URL }}/job/${{ env.PROJECT_NAME }}/${{ env.BUILD_NUMBER }}/" "${{ env.CHANGES }}"
