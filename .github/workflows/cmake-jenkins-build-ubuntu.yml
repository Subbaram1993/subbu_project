name: CMake Build, Test, and Update Tag with Jenkins Build Number

on:
  workflow_run:
    workflows:
      - "Trigger Jenkins Build and Update Build Numbers"
    types:
      - completed
    conclusion: success

env:
  BUILD_TYPE: Release
  JENKINS_URL: ${{ secrets.JENKINS_URL }}
  JENKINS_USER: ${{ secrets.JENKINS_USER }}
  JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}

jobs:
  build-and-tag:
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Git LFS Installation
        run: git lfs version

      - name: Set Job Name from config.json
        id: set_job_name
        run: |
          JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
          echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

      - name: Configure CMake
        run: |
          mkdir -p build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Run Tests
        working-directory: build
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Pull Latest Changes and Handle Conflicts
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config --global commit.gpgSign true
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"
          
          git stash || echo "Nothing to stash"
          git pull origin main --rebase || {
            git checkout --theirs .
            git add .
            git rebase --continue || git rebase --abort
          }
          git stash pop || echo "No stashed changes to apply"

      - name: Get Latest Jenkins Build Number
        id: get_jenkins_build_number
        run: |
          BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/buildNumber")
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Determine Version
        id: determine_version
        run: |
          PATCH=$((BUILD_NUMBER % 10))
          MINOR=$((BUILD_NUMBER / 10 % 6))
          MAJOR=$((BUILD_NUMBER / 60))
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Retrieve Artifacts
        run: |
          ARTIFACTS_DIR="artifacts"
          mkdir -p $ARTIFACTS_DIR
          curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/artifact/*zip*/archive.zip" \
            -o $ARTIFACTS_DIR/archive.zip

      - name: Track Large Files with Git LFS
        run: |
          git lfs track "artifacts/*.zip"
          git add .gitattributes artifacts/
          git commit -S -m "Track large artifact files with Git LFS"

      - name: Push Changes and Tags
        run: |
          git push origin main
          git tag -f "${{ env.VERSION }}"
          git push origin --tags
