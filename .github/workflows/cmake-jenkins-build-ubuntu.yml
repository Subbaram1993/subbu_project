name: CMake Build, Test, and Update Tag with Jenkins Build Number

on:
  workflow_run:
    workflows:
      - "Trigger Jenkins Build and Update Build Numbers"  # Name of the triggering workflow
    types:
      - completed
    conclusion: success  # Ensure it runs only if trigger-jenkins-build.yml is successful

env:
  BUILD_TYPE: Release
  JENKINS_URL: ${{ secrets.JENKINS_URL }}
  JENKINS_USER: ${{ secrets.JENKINS_USER }}
  JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}

jobs:
  build-and-tag:
    runs-on: self-hosted

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Read the config.json and set the jobName as an environment variable
      - name: Set Job Name from config.json
        id: set_job_name
        run: |
          JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
          echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

      # Clean build directory before pulling latest changes
      - name: Clean Build Directory
        run: |
          echo "Cleaning up build directory to prevent merge conflicts..."
          rm -rf build

      # Pull Latest Changes and Handle Conflicts
      - name: Pull Latest Changes and Handle Conflicts
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config --global commit.gpgSign true
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"

          if [[ -n $(git status --porcelain) ]]; then
            git stash
          fi

          git pull origin main --rebase || {
            echo "Merge conflict detected. Resolving automatically using 'theirs'."
            git checkout --theirs .
            git add .
            git rebase --continue || git rebase --abort
          }

          if git stash list | grep -q "stash@{0}"; then
            git stash pop
          fi

      # Fetch Latest Jenkins Build Number
      - name: Get Latest Jenkins Build Number
        id: get_jenkins_build_number
        run: |
          BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/buildNumber")

          if [[ -z "$BUILD_NUMBER" ]]; then
            echo "Error: Failed to retrieve build number from Jenkins"
            exit 1
          fi

          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

      # Determine Version
      - name: Determine Version
        id: determine_version
        run: |
          PATCH=$((BUILD_NUMBER % 10))
          MINOR=$((BUILD_NUMBER / 10 % 6))
          MAJOR=$((BUILD_NUMBER / 60))
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"

          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Determined Version: $VERSION"

      # Build the project
      - name: Build the Project
        run: |
          echo "Creating a fresh build directory..."
          mkdir -p build

          echo "Configuring project with cmake..."
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DENABLE_VALGRIND=ON

          echo "Compiling the project..."
          cd build
          make

          echo "Running tests..."
          make test || exit 1  # Ensure test failures halt execution

      # Run CTest and Display Output
      - name: Run CTest
        run: |
          echo "Running ctest..."
          cd build
          ctest --output-on-failure || exit 1

      - name: Run Tests with Valgrind
        run: |
          echo "Running tests with Valgrind..."
          cd build
          valgrind --leak-check=full --show-leak-kinds=all ./test/run_tests

      # Save Artifacts in Repository (only if needed for further steps)
      - name: Save Changes to Repo (Without Artifacts)
        run: |
          git add .
          git commit -S -m "Add updated version ${{ env.VERSION }}" || echo "No changes to commit"

      # Create and Push Tag
      - name: Create and Push Tag
        run: |
          TAG_NAME="${{ env.VERSION }}"
          git push origin :refs/tags/${TAG_NAME} 2>/dev/null || true
          git tag -a "$TAG_NAME" -m "$TAG_NAME"  # Use the derived version as the message
          git push origin "$TAG_NAME"

      # Push Changes
      - name: Push Changes
        run: |
          git push origin main
