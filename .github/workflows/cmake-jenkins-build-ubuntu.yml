name: CMake Build, Test, and Update Tag with Jenkins Build Number

on:
  workflow_run:
    workflows:
      - "Trigger Jenkins Build and Update Build Numbers"
    types:
      - completed
    conclusions:
      - success

env:
  BUILD_TYPE: Release
  JENKINS_URL: ${{ secrets.JENKINS_URL }}
  JENKINS_USER: ${{ secrets.JENKINS_USER }}
  JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}

jobs:
  build-and-tag:
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Prepare Log Directory
        run: mkdir -p logs

      - name: Install jq and Valgrind if not available
        run: |
          {
            for pkg in jq valgrind; do
              if ! command -v $pkg &> /dev/null; then
                echo "$pkg not found. Installing..."
                sudo apt-get update && sudo apt-get install -y $pkg
              else
                echo "$pkg is already installed."
              fi
            done
          } > logs/install_deps.log 2>&1

      - name: Setup GPG Key
        run: echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import > logs/gpg_setup.log 2>&1

      - name: Set Job Name from config.json
        id: set_job_name
        run: |
          {
            JOB_NAME=$(jq -r '.buildConfig.jobName // empty' config.json)
            if [[ -z "$JOB_NAME" ]]; then
              echo "Error: Job name not found in config.json"
              exit 1
            fi
            echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV
          } > logs/set_job_name.log 2>&1

      - name: Configure Git to Use PAT
        run: |
          git config --global url."https://${{ secrets.PAT_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: Clean Build Directory
        run: |
          echo "Cleaning build directory..." > logs/clean_build.log 2>&1
          rm -rf build >> logs/clean_build.log 2>&1

      - name: Pull Latest Changes and Handle Conflicts
        run: |
          {
            git config user.name "${{ github.actor }}"
            git config user.email "${{ secrets.GIT_EMAIL }}"
            git config --global commit.gpgSign true
            git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"

            STASH_NEEDED=false
            if [[ -n $(git status --porcelain) ]]; then
              git stash push -m "Auto-stash before pulling changes"
              STASH_NEEDED=true
            fi

            git pull --rebase origin main || {
              echo "Merge conflict detected. Using 'theirs' strategy."
              git rebase --abort
              git pull --strategy=recursive -X theirs origin main
            }

            if [[ "$STASH_NEEDED" == "true" ]]; then
              git stash pop || echo "Warning: stash pop resulted in conflicts."
            fi
          } > logs/git_pull.log 2>&1

      - name: Get Latest Jenkins Build Number
        id: get_jenkins_build_number
        run: |
          {
            BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
              "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/buildNumber" | tr -d '\n')

            if [[ -z "$BUILD_NUMBER" || "$BUILD_NUMBER" == "null" ]]; then
              echo "Error: Failed to retrieve valid build number"
              exit 1
            fi

            echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV
          } > logs/jenkins_build_number.log 2>&1

      - name: Determine Version
        id: determine_version
        run: |
          {
            PATCH=$((BUILD_NUMBER % 10))
            MINOR=$((BUILD_NUMBER / 10 % 6))
            MAJOR=$((BUILD_NUMBER / 60))
            VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            echo "VERSION=${VERSION}" >> $GITHUB_ENV
          } > logs/determine_version.log 2>&1

      - name: Ensure Required Directories Exist
        run: mkdir -p include tools obj build > logs/create_dirs.log 2>&1

      - name: Generate Header Files
        run: make generate_headers > logs/generate_headers.log 2>&1

      - name: Build the Project
        run: |
          {
            echo "Configuring CMake..."
            cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DENABLE_VALGRIND=ON

            echo "Building project..."
            cmake --build build

            echo "Running 'make test'..."
            cd build
            make test || exit 1
          } > logs/build_project.log 2>&1

      - name: Run CTest
        run: |
          cd build
          ctest --output-on-failure > ../logs/ctest.log 2>&1 || exit 1

      - name: Run Tests with Valgrind
        run: |
          cd build
          valgrind --leak-check=full --show-leak-kinds=all ./test/run_tests > ../logs/valgrind.log 2>&1

      - name: Save Changes to Repo
        run: |
          {
            git add .
            git commit -S -m "Update version to ${{ env.VERSION }}" || echo "No changes to commit"
          } > logs/git_commit.log 2>&1

      - name: Create and Push Tag
        run: |
          {
            TAG_NAME="${{ env.VERSION }}"

            if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
              echo "Tag $TAG_NAME exists. Deleting..."
              git tag -d "$TAG_NAME"
              git push --delete origin "$TAG_NAME"
            fi

            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            git push origin "$TAG_NAME"
          } > logs/git_tag.log 2>&1

      - name: Push Changes
        run: git push origin main > logs/git_push.log 2>&1

      - name: Upload Execution Logs
        uses: actions/upload-artifact@v4
        with:
          name: cmake-build-logs
          path: logs/

      - name: Success Message
        run: echo "âœ… Build, test, and tagging completed successfully!"
