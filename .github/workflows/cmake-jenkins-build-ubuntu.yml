name: CMake Build, Test, and Update Tag with Jenkins Build Number

on:
  workflow_run:
    workflows:
      - "Trigger Jenkins Build and Update Build Numbers"
    types:
      - completed
    conclusion: success

env:
  BUILD_TYPE: Release
  JENKINS_URL: ${{ secrets.JENKINS_URL }}
  JENKINS_USER: ${{ secrets.JENKINS_USER }}
  JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}

jobs:
  build-and-tag:
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Git LFS Installation
        run: |
          if ! git lfs version; then
            echo "Git LFS is not installed. Please install it on the runner."
            exit 1
          fi

      - name: Set Job Name from config.json
        id: set_job_name
        run: |
          JOB_NAME=$(jq -r '.buildConfig.jobName' config.json)
          echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

      - name: Configure CMake
        run: |
          mkdir -p build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        run: cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Run Tests
        working-directory: build
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Pull Latest Changes and Handle Conflicts
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config --global commit.gpgSign true
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"

          git stash || echo "Nothing to stash"
          git pull origin main --rebase || {
            echo "Merge conflict detected. Resolving with 'theirs'."
            git checkout --theirs . 
            git add . 
            git rebase --continue || git rebase --abort
          }
          git stash pop || echo "No stashed changes to apply"

      - name: Get Latest Jenkins Build Number
        id: get_jenkins_build_number
        run: |
          BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/buildNumber")
          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV

      - name: Determine Version
        id: determine_version
        run: |
          PATCH=$((BUILD_NUMBER % 10))
          MINOR=$((BUILD_NUMBER / 10 % 6))
          MAJOR=$((BUILD_NUMBER / 60))
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Track Large Files with Git LFS
        run: |
          git lfs track "*.zip"
          git add .gitattributes
          git commit -S -m "Track large artifact files with Git LFS" || echo "No changes to commit"

      - name: Push Changes and Tags without LFS upload
        run: |
          # Increase the Git buffer size to handle large pushes
          git config --global http.postBuffer 1048576000  # 1GB buffer size

          # Temporarily disable Git LFS for this push by skipping the smudge filter
          GIT_LFS_SKIP_SMUDGE=1 git push origin main || {
            echo "Retrying Git push with debug flags..."
            GIT_TRACE=1 GIT_CURL_VERBOSE=1 GIT_LFS_SKIP_SMUDGE=1 git push origin main
          }

          # Clean up Git repository (optional but recommended)
          git gc --aggressive --prune=now

          # Remove LFS tracked files from commit before pushing
          git lfs untrack "*.zip"
          git add .gitattributes
          git commit -S -m "Remove LFS tracked files from the commit" || echo "No changes to commit"

          # Push the changes first
          git push origin main || {
            echo "Retrying Git push for changes..."
            GIT_LFS_SKIP_SMUDGE=1 git push origin main
          }

          # Push the tags separately
          git tag -f "${{ env.VERSION }}"
          git push origin --tags || {
            echo "Retrying Git push for tags without LFS upload..."
            GIT_LFS_SKIP_SMUDGE=1 git push origin --tags
          }

      - name: Verify Push Status
        run: |
          if git show-ref --tags | grep -q "${{ env.VERSION }}"; then
            echo "Tag ${{ env.VERSION }} successfully pushed."
          else
            echo "Failed to push tag ${{ env.VERSION }}."
            exit 1
          }
