name: CMake Build, Test, and Update Tag with Jenkins Build Number

on:
  workflow_run:
    workflows:
      - "Trigger Jenkins Build and Update Build Numbers"  # Name of the triggering workflow
    types:
      - completed
    conclusions:
      - success  # Ensure it runs only if trigger-jenkins-build.yml is successful

env:
  BUILD_TYPE: Release
  JENKINS_URL: ${{ secrets.JENKINS_URL }}
  JENKINS_USER: ${{ secrets.JENKINS_USER }}
  JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}

jobs:
  build-and-tag:
    runs-on: self-hosted

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Install required dependencies only if not available
      - name: Install jq and Valgrind if not available
        run: |
          for pkg in jq valgrind; do
            if ! command -v $pkg &> /dev/null; then
              echo "$pkg not found. Installing..."
              sudo apt-get update && sudo apt-get install -y $pkg
            else
              echo "$pkg is already installed."
            fi
          done

      # Import GPG key for signing commits
      - name: Setup GPG Key
        run: echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import

      # Read the config.json and set the jobName as an environment variable
      - name: Set Job Name from config.json
        id: set_job_name
        run: |
          JOB_NAME=$(jq -r '.buildConfig.jobName // empty' config.json)
          if [[ -z "$JOB_NAME" ]]; then
            echo "Error: Job name not found in config.json"
            exit 1
          fi
          echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

      # Clean build directory before pulling latest changes
      - name: Clean Build Directory
        run: |
          echo "Cleaning up build directory..."
          rm -rf build

      # Pull Latest Changes and Handle Conflicts
      - name: Pull Latest Changes and Handle Conflicts
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git config --global commit.gpgSign true
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"

          STASH_NEEDED=false
          if [[ -n $(git status --porcelain) ]]; then
            git stash push -m "Auto-stash before pulling changes"
            STASH_NEEDED=true
          fi

          git pull --rebase origin main || {
            echo "Merge conflict detected. Resolving using 'theirs' strategy."
            git rebase --abort
            git pull --strategy=recursive -X theirs origin main
          }

          if [[ "$STASH_NEEDED" == "true" ]]; then
            git stash pop || echo "Warning: Stash pop resulted in conflicts."
          fi

      # Fetch Latest Jenkins Build Number
      - name: Get Latest Jenkins Build Number
        id: get_jenkins_build_number
        run: |
          BUILD_NUMBER=$(curl -s -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ env.JOB_NAME }}/lastSuccessfulBuild/buildNumber" | tr -d '\n')

          if [[ -z "$BUILD_NUMBER" || "$BUILD_NUMBER" == "null" ]]; then
            echo "Error: Failed to retrieve valid build number from Jenkins"
            exit 1
          fi

          echo "BUILD_NUMBER=${BUILD_NUMBER}" >> $GITHUB_ENV
          echo "Jenkins Build Number: $BUILD_NUMBER"

      # Determine version number based on build number
      - name: Determine Version
        id: determine_version
        run: |
          PATCH=$((BUILD_NUMBER % 10))
          MINOR=$((BUILD_NUMBER / 10 % 6))
          MAJOR=$((BUILD_NUMBER / 60))
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Determined Version: $VERSION"

      # Ensure required directories exist
      - name: Ensure Required Directories Exist
        run: |
          mkdir -p include tools obj build

      # Generate header files using Makefile rule
      - name: Generate Header Files
        run: make generate_headers

      # Build the project
      - name: Build the Project
        run: |
          echo "Configuring project with CMake..."
          cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DENABLE_VALGRIND=ON

          echo "Compiling the project..."
          cmake --build build

          echo "Running tests..."
          cd build
          make test || exit 1  # Ensure test failures halt execution

      # Run CTest and display output
      - name: Run CTest
        run: |
          echo "Running ctest..."
          cd build
          ctest --output-on-failure || exit 1

      # Run tests with Valgrind
      - name: Run Tests with Valgrind
        run: |
          echo "Running tests with Valgrind..."
          cd build
          valgrind --leak-check=full --show-leak-kinds=all ./test/run_tests

      # Save changes to the repository (excluding artifacts)
      - name: Save Changes to Repo
        run: |
          git add .
          git commit -S -m "Update version to ${{ env.VERSION }}" || echo "No changes to commit"

      # Create and Push Tag
      - name: Create and Push Tag
        run: |
          TAG_NAME="${{ env.VERSION }}"

          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists. Updating it."
            git tag -d "$TAG_NAME"
            git push --delete origin "$TAG_NAME"
          fi

          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

      # Push changes to the repository
      - name: Push Changes
        run: |
          git push origin main

      # Final success message
      - name: Success Message
        run: echo "Build, test, and tagging process completed successfully!"
